# This is a general manifest template for running Bash and core utility programs,
# including ls, cat, cp, date, and rm.

loader.preload = "file:{{ graphene.libos }}"
libos.entrypoint = "{{ execdir }}/bash"
loader.log_level = "debug"


loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
loader.env.PATH = "{{ execdir }}"

loader.insecure__use_cmdline_argv = true

fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ graphene.runtimedir() }}"

fs.mount.lib64.type = "chroot"
fs.mount.lib64.path = "{{ arch_libdir }}"
fs.mount.lib64.uri = "file:{{ arch_libdir }}"

fs.mount.usr_lib.type = "chroot"
fs.mount.usr_lib.path = "/usr/lib"
fs.mount.usr_lib.uri = "file:/usr/lib"

fs.mount.opt.type= "chroot"
fs.mount.opt.path= "/opt"
fs.mount.opt.uri= "file:/opt"

fs.mount.tmp.type = "chroot"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = "file:/tmp"


#fs.mount.work.type = "chroot"
#fs.mount.work.path = "{{ work_dir }}"
#fs.mount.work.uri = "file:{{ work_dir }}"

fs.mount.work.type = "chroot"
fs.mount.work.path = "/ppml/trusted-realtime-ml/redis/work"
fs.mount.work.uri = "file:/ppml/trusted-realtime-ml/redis/work"

fs.mount.bin.type = "chroot"
fs.mount.bin.path = "/bin"
fs.mount.bin.uri = "file:/bin"

sgx.nonpie_binary = true
sgx.enclave_size = "65536M"
sgx.thread_num = 1024

sgx.trusted_files.redis-server = "file:/ppml/trusted-realtime-ml/redis/redis-server"

sgx.trusted_files.redis-server2 = "file:redis-server"

sgx.trusted_files.execs = "file:{{ execdir }}/"
sgx.trusted_files.runtime = "file:{{ graphene.runtimedir() }}/"
sgx.trusted_files.arch_libdir = "file:{{ arch_libdir }}/"

sgx.trusted_files.usr_arch_libdir = "file:/usr/{{ arch_libdir }}/"

sgx.allowed_files.scripts = "file:scripts/"

sgx.allowed_files.workfile = "file:{{ work_dir }}"
sgx.trusted_files.workfile="file:{{ work_dir }}"


sgx.allowed_files.tmp       = "file:/tmp"
sgx.allowed_files.etc       = "file:/etc"

#sgx.allowed_files.biddllog = "file:/ppml/trusted_big_data_ml/bigdl.log"
# from older version trusted


# Glibc libraries


# Name Service Switch (NSS) libraries (Glibc dependencies)
sgx.trusted_files.libnsscompat = "file:{{ arch_libdir }}/libnss_compat.so.2"
sgx.trusted_files.libnssfiles  = "file:{{ arch_libdir }}/libnss_files.so.2"
sgx.trusted_files.libnssnis  = "file:{{ arch_libdir }}/libnss_nis.so.2"

# libNSL is a dependency of libnss_compat above.

sgx.trusted_files.libnsl = "file:{{ arch_libdir }}/libnsl.so.1"
sgx.trusted_files.libsystemd = "file:{{ arch_libdir }}/libsystemd.so.0"
sgx.trusted_files.liblzma = "file:{{ arch_libdir }}/liblzma.so.5"
sgx.trusted_files.libgcrypt = "file:{{ arch_libdir }}/libgcrypt.so.20"
sgx.trusted_files.libgpgerror = "file:{{ arch_libdir }}/libgpg-error.so.0"
sgx.trusted_files.liblz4 = "file:/usr/{{ arch_libdir }}/liblz4.so.1"

sgx.allowed_files.nsswitch = "file:/etc/nsswitch.conf"
sgx.allowed_files.ethers = "file:/etc/ethers"
sgx.allowed_files.hosts = "file:/etc/hosts"
sgx.allowed_files.group = "file:/etc/group"
sgx.allowed_files.passwd = "file:/etc/passwd"

sgx.allowed_files.gaiconf = "file:/etc/gai.conf"
sgx.trusted_files.libssl = "file:/usr{{ arch_libdir }}/libssl.so.1.1"
sgx.trusted_files.libcrypto = "file:/usr{{ arch_libdir }}/libcrypto.so.1.1"

sgx.allowed_files.conf = "file:/ppml/trusted-realtime-ml/redis/redis.conf"
sgx.allowed_files.work = "file:/ppml/trusted-realtime-ml/redis/work"
sgx.allowed_files.opensslcnf = "file:/usr/lib/ssl/openssl.cnf"
